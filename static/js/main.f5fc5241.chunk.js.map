{"version":3,"sources":["bg.jpg","home.js","App.js","reportWebVitals.js","index.js"],"names":["dbx","require","Dropbox","accessToken","ColorButton","withStyles","theme","root","color","palette","getContrastText","common","white","backgroundColor","Button","axios","default","useStyles","makeStyles","grow","flexGrow","clearButton","width","borderRadius","padding","fontSize","fontWeight","maxWidth","media","height","paper","spacing","margin","gridContainer","justifycontent","mainContainer","backgroundImage","image","backgroundRepeat","backgroundPosition","backgroundSize","marginTop","imageCard","boxShadow","imageCardEmpty","noImage","input","display","uploadIcon","background","tableContainer","table","tableHead","tableRow","tableCell","borderColor","tableCell1","tableBody","text","textAlign","buttonGrid","detail","flexDirection","alignItems","appbar","loader","ImageUpload","classes","useState","selectedFile","setSelectedFile","preview","setPreview","data","setData","setImage","isLoading","setIsloading","file","setfile","confidence","sendFile","a","formData","FormData","console","log","append","method","url","catch","error","res","status","alert","getImage","filesListFolder","path","then","response","filesGetThumbnail","result","entries","path_display","format","size","img","document","createElement","blob","fileBlob","name","lastModified","Date","myFile","File","type","src","window","URL","createObjectURL","objectUrl","body","appendChild","useEffect","undefined","onSelectFile","files","length","thumbnailLink","parseFloat","toFixed","Fragment","AppBar","position","className","Toolbar","Typography","title","variant","noWrap","Container","disableGutters","Grid","container","direction","item","xs","Card","CardActionArea","CardMedia","component","CardContent","content","acceptedFiles","dropzoneText","onChange","appKey","success","cancel","multiselect","extensions","value","onClick","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","scope","class","CircularProgress","startIcon","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f5fc5241.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.fa273077.jpg\";","import { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Paper, CardActionArea, CardMedia, Grid, TableContainer, Table, TableBody, TableHead, TableRow, TableCell, Button, CircularProgress } from \"@material-ui/core\";\r\nimport { Dropbox } from 'dropbox';\r\nimport image from \"./bg.jpg\";\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport { common } from '@material-ui/core/colors';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport  DropboxChooser  from \"react-dropbox-chooser\"\r\nconst fs = require('fs')\r\n\r\nconst accessToken = 'sl.BSJO57oyGP_FZRTg-4G4oKyBWsbqx2mbZu65tgC9bcoBuJJaYP5qs_m1ErqwSErQ_uctJacJiXS4Tz3KZB4cqidaYiGeNupC4Ud-uF0JjA53aTkO2-XsPUBvSYyj_p5Dt_RJxlwcatR8';\r\n\r\nconst dbx = new Dropbox({ accessToken });\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(common.white),\r\n    backgroundColor: common.white,\r\n    '&:hover': {\r\n      backgroundColor: '#ffffff7a',\r\n    },\r\n  },\r\n}))(Button);\r\nconst axios = require(\"axios\").default;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  clearButton: {\r\n    width: \"-webkit-fill-available\",\r\n    borderRadius: \"15px\",\r\n    padding: \"15px 22px\",\r\n    color: \"#000000a6\",\r\n    fontSize: \"20px\",\r\n    fontWeight: 900,\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n  },\r\n  gridContainer: {\r\n    justifycontent: \"center\",\r\n    padding: \"4em 1em 0 1em\",\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    height: \"93vh\",\r\n    marginTop: \"8px\",\r\n  },\r\n  //image card is the image we got\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    maxWidth: 400,\r\n    height: 500,\r\n    backgroundColor: 'transparent',\r\n    boxShadow: '0px 9px 70px 0px rgb(0 0 0 / 30%) !important',\r\n    borderRadius: '15px',\r\n  },\r\n  imageCardEmpty: {\r\n    height: 'auto',\r\n  },\r\n  noImage: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: \"400 !important\",\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  uploadIcon: {\r\n    background: 'white',\r\n  },\r\n  tableContainer: {\r\n    backgroundColor: 'transparent !important',\r\n    boxShadow: 'none !important',\r\n  },\r\n  table: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableHead: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableRow: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableCell: {\r\n    fontSize: '22px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableCell1: {\r\n    fontSize: '14px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableBody: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  text: {\r\n    color: 'white !important',\r\n    textAlign: 'center',\r\n  },\r\n  buttonGrid: {\r\n    maxWidth: \"416px\",\r\n    width: \"100%\",\r\n  },\r\n  detail: {\r\n    backgroundColor: 'white',\r\n    display: 'flex',\r\n    justifycontent: 'center',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  appbar: {\r\n    background: '#e900ff',\r\n    boxShadow: 'none',\r\n    color: 'white'\r\n  },\r\n  loader: {\r\n    color: '#be6a77 !important',\r\n  }\r\n}));\r\nexport const ImageUpload = () => {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  const [data, setData] = useState();\r\n  const [image, setImage] = useState(false);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  const [file,setfile] = useState()\r\n  let confidence = 0;\r\n  //https://pdc-server.herokuapp.com/predict\r\n  const sendFile = async () => {\r\n    if (image) {\r\n\r\n      let formData = new FormData();\r\n      console.log(\"Sending\",selectedFile);\r\n      console.log(\"Sending\",file);\r\n      formData.append(\"file\", file);\r\n\r\n      let res = await axios({\r\n        method: \"post\",\r\n        url: \"https://pdc-server.herokuapp.com/predict\",\r\n        data: formData,\r\n      }).catch(function (error) {\r\n        console.log(error);\r\n      });\r\n      if (res != null && res.status === 200) {\r\n        setData(res.data);\r\n        console.log(res.data);\r\n        setIsloading(false);\r\n      } else {\r\n        alert(\"Check your Internet connection!!\");\r\n        setIsloading(true);\r\n      }\r\n\r\n    }else{\r\n      console.log(\"Couldn't send1!!\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const getImage = async () => {\r\n    const res = await dbx.filesListFolder({ path: '' })\r\n      .then(function (response) {\r\n        // console.log(response);\r\n        // ↑ this works!\r\n        dbx.filesGetThumbnail({ path: response.result.entries[1].path_display, format: \"jpeg\", size: \"w64h64\" })\r\n          .then(function (result) {\r\n            \r\n            // ↑ this works!\r\n            var img = document.createElement('img');\r\n            var blob = result.result.fileBlob;\r\n            blob.name = 'image.jpeg';\r\n            blob.lastModified = new Date(); \r\n        \r\n            const myFile = new File([blob], 'image.jpeg', {\r\n              type: 'image/jpg',\r\n            });\r\n          \r\n            console.log(myFile  instanceof File , myFile);\r\n\r\n            img.src = window.URL.createObjectURL(result.result.fileBlob);\r\n            const objectUrl = window.URL.createObjectURL(result.result.fileBlob);\r\n            document.body.appendChild(img);\r\n            setfile(myFile);\r\n            console.log(objectUrl);\r\n            \r\n          })\r\n\r\n      \r\n      });\r\n      \r\n    console.log(res)\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n    setImage(false);\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n  };\r\n\r\n\r\n  useEffect(()=>{\r\n  sendFile();\r\n  },[file])\r\n\r\n  \r\n  //2\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    // create obj image from url\r\n    // const objectUrl = window.URL.createObjectURL(selectedFile);\r\n    // setPreview(objectUrl);    \r\n    setPreview(selectedFile);\r\n    \r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (!preview) {\r\n      return;\r\n    }\r\n    setIsloading(true);\r\n    getImage();\r\n  }, [preview]);\r\n\r\n  //1\r\n  const onSelectFile = (files) => {\r\n    if (!files || files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      setImage(false);\r\n      setData(undefined);\r\n      return;\r\n    }\r\n    console.log(files,'Done');\r\n    setImage(true);\r\n\r\n    setSelectedFile(files[0].thumbnailLink);\r\n    //setSelectedFile(files[0]);\r\n    setData(undefined);\r\n    \r\n  };\r\n\r\n  if (data) {\r\n    confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Leaf DiseaseClassification\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth={false} className={classes.mainContainer} disableGutters={true}>\r\n        <Grid\r\n          className={classes.gridContainer}\r\n          container\r\n          direction=\"row\"\r\n          justifycontent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item xs={12}>\r\n\r\n            <Card className={`${classes.imageCard} ${!image ? classes.imageCardEmpty : ''}`}>\r\n\r\n              {image && <CardActionArea>\r\n\r\n                <CardMedia\r\n                  className={classes.media}\r\n                  image={preview}\r\n                  component=\"img\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n              </CardActionArea>\r\n              }\r\n\r\n              {!image && <CardContent className={classes.content}>\r\n              <DropzoneArea\r\n                  acceptedFiles={['image/*']}\r\n                  dropzoneText={\"Drag and drop an image of a potato plant leaf to process\"}\r\n                  onChange={onSelectFile}\r\n                />\r\n                <DropboxChooser\r\n                  appKey={ 'pcwevk0ugf0wpes' }\r\n                  success={files => onSelectFile(files)}\r\n                  cancel={() => alert(\"Service canclled\")}\r\n                  multiselect={true}\r\n                  extensions={['.jpg']} >\r\n                  <div className=\"dropbox-button\">Click me!</div>\r\n                </DropboxChooser>\r\n                <input type=\"button\" value=\"GetImage\" onClick={getImage} />\r\n              </CardContent>}\r\n              {data && <CardContent className={classes.detail}>\r\n                <TableContainer component={Paper} className={classes.tableContainer}>\r\n                  <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n                    <TableHead className={classes.tableHead}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell className={classes.tableCell1}>Label:</TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell1}>Confidence:</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className={classes.tableBody}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell component=\"th\" scope=\"row\" className={classes.tableCell}>\r\n                          {data.class}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell}>{confidence}%</TableCell>\r\n                      </TableRow>\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </CardContent>}\r\n              {isLoading && <CardContent className={classes.detail}>\r\n                <CircularProgress color=\"secondary\" className={classes.loader} />\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                  Processing\r\n                </Typography>\r\n              </CardContent>}\r\n            </Card>\r\n          </Grid>\r\n          {data &&\r\n            <Grid item className={classes.buttonGrid} >\r\n\r\n              <ColorButton variant=\"contained\" className={classes.clearButton} color=\"primary\" component=\"span\" size=\"large\" onClick={clearData} startIcon={<Clear fontSize=\"large\" />}>\r\n                Clear\r\n              </ColorButton>\r\n            </Grid>}\r\n        </Grid >\r\n\r\n      </Container >\r\n\r\n    </React.Fragment >\r\n  );\r\n};","import { ImageUpload } from \"./home\";\n\nfunction App() {\n  return <ImageUpload />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}